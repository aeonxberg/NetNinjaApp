/*
Deployment script for DBS_Parkinspect

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "DBS_Parkinspect"
:setvar DefaultFilePrefix "DBS_Parkinspect"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL12.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key f0e240cc-2160-4e67-80a1-1ef1d19ccfd4 is skipped, element [dbo].[Ninja].[Id] (SqlSimpleColumn) will not be renamed to Name';


GO
PRINT N'Rename refactoring operation with key 44e48e0f-5181-4b3d-b1f8-ffaafd8f0b66 is skipped, element [dbo].[Equipment].[Id] (SqlSimpleColumn) will not be renamed to Name';


GO
PRINT N'Creating [dbo].[Equipment]...';


GO
CREATE TABLE [dbo].[Equipment] (
    [Name]         NVARCHAR (50) NOT NULL,
    [Agility]      INT           NOT NULL,
    [Price]        INT           NOT NULL,
    [Intelligence] INT           NOT NULL,
    [Strength]     INT           NOT NULL,
    [ImageURL]     NVARCHAR (50) NULL,
    [Category]     NVARCHAR (50) NOT NULL,
    [NinjaName]    NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[Ninja]...';


GO
CREATE TABLE [dbo].[Ninja] (
    [Name]         NVARCHAR (50) NOT NULL,
    [Agility]      INT           NOT NULL,
    [Intelligence] INT           NOT NULL,
    [Strength]     INT           NOT NULL,
    [Gold]         INT           NOT NULL,
    [ImageURL]     NVARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Name] ASC)
);


GO
PRINT N'Creating [dbo].[fk_EquipmentNinja]...';


GO
ALTER TABLE [dbo].[Equipment] WITH NOCHECK
    ADD CONSTRAINT [fk_EquipmentNinja] FOREIGN KEY ([NinjaName]) REFERENCES [dbo].[Ninja] ([Name]);


GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'f0e240cc-2160-4e67-80a1-1ef1d19ccfd4')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('f0e240cc-2160-4e67-80a1-1ef1d19ccfd4')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '44e48e0f-5181-4b3d-b1f8-ffaafd8f0b66')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('44e48e0f-5181-4b3d-b1f8-ffaafd8f0b66')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

print '*-- inserting into table ninja --*'

MERGE INTO Ninja AS Target
USING (VALUES
('MoMoney',5,25,20,9001,'no image url'),
('LordAeon',7,30,17,650,'no image url'),
('Hitman',5,5,1,150,'no image url')
)
AS Source (Name, Agility, Intelligence, Strength, Gold, ImageURL)
ON target.Name = Source.Name
WHEN MATCHED THEN
UPDATE SET Name = Source.Name
WHEN NOT MATCHED BY TARGET THEN
INSERT (Name, Agility, Intelligence, Strength, Gold, ImageURL)
VALUES (Name, Agility, Intelligence, Strength, Gold, ImageURL)
WHEN NOT MATCHED BY SOURCE THEN DELETE;
print '*-- inserting into table ninja --*'

MERGE INTO Equipment AS Target
USING (VALUES
('Full Leather Jacket'	,5	,300	,0	,25	,'no image url', 'Chest', 'MoMoney'),
('Snake Leather Boots'	,10	,100	,0	,3	,'no image url', 'Boots', 'LordAeon'),
('Black Denim Hosen'	,3	,55		,0	,5	,'no image url', 'Legs', 'MoMoney'),
('Promise of War'		,10	,400	,6	,20	,'no image url', 'Chest', NULL),
('Terror of the Dragons',2	,550	,0	,4	,'no image url', 'Shoulders', NULL),
('Manly Mankini'		,20	,25		,-3	,5	,'no image url', 'Legs', NULL),
('Flip flops'			,35	,10		,10	,15	,'no image url', 'Boots', NULL)
)
AS Source (Name, Agility, Price, Intelligence, Strength, ImageURL, Category, NinjaName)
ON target.Name = Source.Name
WHEN MATCHED THEN
UPDATE SET Name = Source.Name
WHEN NOT MATCHED BY TARGET THEN
INSERT (Name, Agility, Price, Intelligence, Strength, ImageURL, Category, NinjaName)
VALUES (Name, Agility, Price, Intelligence, Strength, ImageURL, Category, NinjaName)
WHEN NOT MATCHED BY SOURCE THEN DELETE;
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Equipment] WITH CHECK CHECK CONSTRAINT [fk_EquipmentNinja];


GO
PRINT N'Update complete.';


GO
